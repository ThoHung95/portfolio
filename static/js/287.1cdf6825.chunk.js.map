{"version":3,"file":"static/js/287.1cdf6825.chunk.js","mappings":"8NAQA,MAAMA,EAAwB,CAAC,SAAU,KAInCC,EAAqB,CAAC,QAAS,YA0B/BC,EAAqBA,CAACC,EAAGC,EAAUC,EAAQC,KAG3CD,EAAOE,UAKRH,IAAaC,EAAOE,QAAQC,UAAUC,SAAS,UAChDJ,EAAOE,QAAQC,UAAUE,IAAI,WAItBN,GAAYC,EAAOE,QAAQC,UAAUC,SAAS,WACrDJ,EAAOE,QAAQC,UAAUG,OAAO,UAGlCC,EAAkBT,EAAGE,EAAQC,GAAO,EAUhCO,EAAkBA,CAACC,EAAeC,MAClCD,MAIDC,EAAcC,SAASF,EAAcG,WAIjCJ,EAAgBC,EAAcI,cAAeH,IAUhDH,EAAoBA,CAACT,EAAGE,EAAQC,KACpC,MAAMQ,EAAgBX,EAAEgB,OAClBC,EAAMf,EAAOE,QAAQc,SAAS,GAEjCR,EAAgBC,EAAed,GAChCoB,EAAIE,IAAMhB,EAAOiB,QAEXV,EAAgBC,EAAeb,GACrCmB,EAAIE,IAAMhB,EAAOkB,KAEXJ,EAAIE,MAAQhB,EAAOmB,UACzBL,EAAIE,IAAMhB,EAAOmB,QACnB,EAqCF,QArBA,SAAqBC,GAIjB,IAJkB,WACpBC,EAAU,WACVC,EAAU,QACVC,GACDH,EACC,MAAMrB,GAASyB,EAAAA,EAAAA,UAIf,MAhBwBC,EAAC1B,EAAQC,KACjC0B,OAAOC,iBAAiB,aAAc9B,GAvFrB+B,EAAC/B,EAAGE,KACrB,MAAM8B,EAAShC,EAAEiC,QAAU,EACrBC,EAASlC,EAAEmC,QAAU,GAEvBjC,EAAOE,UAIXF,EAAOE,QAAQgC,MAAMC,UAAS,eAAAC,OAAkBJ,EAAM,QAAAI,OAAON,EAAM,UAAQ,EA+E/BD,CAAW/B,EAAGE,KAC1D2B,OAAOC,iBAAiB,aAAc9B,GAAMD,EAAmBC,GAAG,EAAOE,EAAQC,KACjF0B,OAAOC,iBAAiB,YAAa9B,GAAMD,EAAmBC,GAAG,EAAME,EAAQC,IAAQ,EAWvFyB,CAAkB1B,EAAQ,CAAEoB,QAASE,EAAYJ,QAASK,EAAYJ,KAAMK,KAG1Ea,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAtB,UACEqB,EAAAA,EAAAA,KAAA,OACEE,IAAKvC,EACLwC,UAAU,gBAAexB,UAEzBqB,EAAAA,EAAAA,KAAA,OAAKpB,IAAKK,EAAYkB,UAAU,SAASC,IAAI,cAIrD,ECzHMC,EAAWC,EAAAA,MAAW,IAAM,wDAgClC,QA9BA,WACE,MAAOC,EAAUC,IAAkBC,EAAAA,EAAAA,WAAS,GAK5C,OAJGF,GACDG,YAAW,IAAMF,GAAe,IAAO,MAIvCR,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CACHC,IAAKL,EACLM,eAAe,EAAKlC,UAEpBmC,EAAAA,EAAAA,MAACC,EAAAA,IAAc,CAAApC,SAAA,EAEVqC,EAAAA,KACDhB,EAAAA,EAAAA,KAACiB,EAAY,CACXhC,W,y+EACAC,W,66IACAC,Q,wgKAGJa,EAAAA,EAAAA,KAAA,OAAKG,UAAU,MAAKxB,UAClBqB,EAAAA,EAAAA,KAACkB,EAAAA,SAAQ,CAACC,UAAUnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAO,IAAIzC,UAC9BqB,EAAAA,EAAAA,KAACK,EAAQ,YAMrB,C","sources":["components/CustomCursor/CustomCursor.js","App.js"],"sourcesContent":["import React, { useRef, MutableRefObject } from 'react';\r\n\r\nimport './CustomCursor.css';\r\n\r\n\r\n/**\r\n * DOM elements that change cursor to pointer type\r\n */\r\nconst pointerCursorElements = ['BUTTON', 'A'];\r\n/**\r\n * DOM elements that change cursor to text type\r\n */\r\nconst textCursorElements = ['INPUT', 'TEXTAREA']\r\n\r\n/**\r\n * Moves the custom cursor to the mouse position\r\n * @param {Event} e Event of the listener\r\n * @param {MutableRefObject} cursor Div that contains the custom cursor\r\n */\r\nconst moveCursor = (e, cursor) => {\r\n  const mouseY = e.clientY - 5;\r\n  const mouseX = e.clientX - 24;\r\n   \r\n  if(!cursor.current) {\r\n    return;\r\n  }\r\n  \r\n  cursor.current.style.transform = `translate3d(${mouseX}px, ${mouseY}px, 0)`;\r\n};\r\n\r\n\r\n/**\r\n * Changes the cursor display state\r\n * @param {Event} e Event of the listener\r\n * @param {boolean} isHidden Whether the custom cursor should be hidden or not \r\n * @param {MutableRefObject} cursor Div that contains the custom cursor\r\n * @param {{ default: string, pointer: string, text: string }} images JSON with the cursor images references\r\n */\r\nconst changeCursorHidden = (e, isHidden, cursor, images) => {\r\n\r\n  // There are no div element selected\r\n  if(!cursor.current) {\r\n    return;\r\n  }\r\n\r\n  // The custom cursor should be hidden and it's not hidden already\r\n  if(isHidden && !cursor.current.classList.contains('hidden')) {\r\n    cursor.current.classList.add('hidden');\r\n  }\r\n\r\n  // The custom cursor should be displayed and it's hidden\r\n  else if(!isHidden && cursor.current.classList.contains('hidden')) {\r\n    cursor.current.classList.remove('hidden');\r\n  }\r\n\r\n  changeCursorStyle(e, cursor, images);\r\n};\r\n\r\n/**\r\n * Checks if the element or its parent elements nodeNames are contained\r\n * in the given elements array recursively \r\n * @param {EventTarget} targetElement Target element to do the checks\r\n * @param {string[]} elementsArray Elemenents list\r\n * @returns Whether the targetElement or its parent elements are included in the elementsArray\r\n */\r\nconst isCursorElement = (targetElement, elementsArray) => {\r\n  if(!targetElement) {\r\n    return false;\r\n  }\r\n\r\n  if(elementsArray.includes(targetElement.nodeName)) {\r\n    return true;\r\n  }\r\n\r\n  return isCursorElement(targetElement.parentElement, elementsArray);\r\n};\r\n\r\n\r\n/**\r\n * Changes the custom cursor style\r\n * @param {Event} e Event of the listener\r\n * @param {MutableRefObject} cursor Div that contains the custom cursor\r\n * @param {{ default: string, pointer: string, text: string }} images JSON with the cursor images references\r\n */\r\nconst changeCursorStyle = (e, cursor, images) => {\r\n  const targetElement = e.target;\r\n  const img = cursor.current.children[0];\r\n  \r\n  if(isCursorElement(targetElement, pointerCursorElements)) {\r\n    img.src = images.pointer;\r\n  }\r\n  else if(isCursorElement(targetElement, textCursorElements)) {\r\n    img.src = images.text;\r\n  }\r\n  else if(img.src !== images.default) {\r\n    img.src = images.default;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Adds event listeners to move and style the custom cursor\r\n * @param {MutableRefObject} cursor Div that contains the custom cursor\r\n * @param {{ default: string, pointer: string, text: string }} images JSON with the cursor images references\r\n */\r\nconst AddEventListeners = (cursor, images) => {\r\n  window.addEventListener('mousemove', (e) => moveCursor(e, cursor));\r\n  window.addEventListener('mouseover', (e) => changeCursorHidden(e, false, cursor, images));\r\n  window.addEventListener('mouseout', (e) => changeCursorHidden(e, true, cursor, images));\r\n};\r\n\r\n\r\nfunction CustomCursor({ \r\n  defaultImg, \r\n  pointerImg,\r\n  textImg\r\n}) {\r\n  const cursor = useRef();\r\n\r\n  AddEventListeners(cursor, { default: defaultImg, pointer: pointerImg, text: textImg });\r\n\r\n  return (\r\n    <>\r\n      <div \r\n        ref={cursor}\r\n        className=\"cursor hidden\"\r\n      >\r\n        <img src={defaultImg} className='cursor' alt='cursor' />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomCursor;","import React, { Suspense, useState } from 'react';\r\nimport { ChakraProvider, Fade } from '@chakra-ui/react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport CursorImage from 'assets/media/cursor.png';\r\nimport PointerImage from 'assets/media/pointer.png';\r\nimport TextImage from 'assets/media/text.png';\r\n\r\nimport './App.css';\r\nimport Loading from 'components/Loading/Loading';\r\nimport CustomCursor from 'components/CustomCursor/CustomCursor';\r\nconst FullPage = React.lazy(() => import('components/FullPage/FullPage'));\r\n\r\nfunction App() {\r\n  const [isLoaded, changeIsLoaded] = useState(false);\r\n  if(isLoaded) {\r\n    setTimeout(() => changeIsLoaded(true), 100);\r\n  }\r\n\r\n  return (\r\n    <Fade\r\n      in={!isLoaded}\r\n      unmountOnExit={true}\r\n    >\r\n      <ChakraProvider >\r\n        {\r\n          !isMobile && \r\n          <CustomCursor \r\n            defaultImg={CursorImage} \r\n            pointerImg={PointerImage} \r\n            textImg={TextImage} \r\n          />\r\n        }\r\n        <div className=\"App\">\r\n          <Suspense fallback={<Loading />}>\r\n            <FullPage />\r\n          </Suspense>\r\n        </div>\r\n      </ChakraProvider>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["pointerCursorElements","textCursorElements","changeCursorHidden","e","isHidden","cursor","images","current","classList","contains","add","remove","changeCursorStyle","isCursorElement","targetElement","elementsArray","includes","nodeName","parentElement","target","img","children","src","pointer","text","default","_ref","defaultImg","pointerImg","textImg","useRef","AddEventListeners","window","addEventListener","moveCursor","mouseY","clientY","mouseX","clientX","style","transform","concat","_jsx","_Fragment","ref","className","alt","FullPage","React","isLoaded","changeIsLoaded","useState","setTimeout","Fade","in","unmountOnExit","_jsxs","ChakraProvider","isMobile","CustomCursor","Suspense","fallback","Loading"],"sourceRoot":""}